{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
            "type": "string"
        }
    },

    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email",
        "FunctionName02": "parse_pdf",
        "FunctionName03": "normalize_json",
        "FunctionName04": "json_to_html"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Inbox"
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@listCallbackUrl()"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Inbox"
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Check_attachments_on_MDTI": {
                            "actions": {
                                "Copilot_check_file_hashes": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "hash:@{body('Process_JSON')?['email_content']?['attachments'][0]?['attachment_sha256']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetFileAnalysis"
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('attachments'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Check_if_domains_exist": {
                            "actions": {
                                "Copilot_check_MDTI_for_domain_reputation": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "Check the reputation for these domains @{body('Process_JSON')?['domains']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "path": "/process-prompt"
                                    }
                                },
                                "Copilot_check_MDTI_for_url_reputation": {
                                    "runAfter": {
                                        "Copilot_check_MDTI_for_domain_reputation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "Check the reputation of these URLs @{string(variables('urls'))}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_domains": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {
                                "Initialize_variable_message_id": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            }
                        },
                        "Analyze_email_body_and_attachment_data": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "/AskGpt\n\n### Task: Analyze the email for potential phishing indicators, focusing on the attachment and the body content. Output in JSON.\n\nData from Previous Session on Email Intent:\n\"\"\"\n@{body('Summarize_Email_Intent')?['EvaluationResultContent']}\n\"\"\"\n\n### Task: Conduct a detailed analysis of the email attachment and assess how it aligns with previously detected phishing indicators in the email body. Focus on the attachment’s relationship to the email’s purpose, checking for consistency with legitimate transactional emails. If attachments were found a file analysis was performed in a previous prompt.\n\nEmail Body Analysis Summary (from previous analysis):\n- Summary: The email body contains several indicators of phishing intent, including psychological tactics, generic greetings, and suspicious requests.\n- Detected Indicators: Psychological tactics, generic greeting, suspicious links/attachments, and brand inconsistencies.\n\n### Analysis Steps:\n1. **Email Body Context Recap**: Briefly summarize the previously identified phishing indicators to maintain context.\n\n2. **Attachment Review**:\n   - **Attachment Summary**: Describe the attachment’s content or format (e.g., invoice, PDF).\n   - **Legitimacy Check**: Evaluate if the attachment aligns with the email’s stated purpose. Consider whether the attachment’s format, file type, and content are consistent with legitimate documents.\n   - **Potential Malicious Indicators**: Identify any aspects of the attachment that might suggest malicious intent (e.g., unusual file types, unexpected password protection).\n\n3. **Overall Phishing Likelihood Assessment**: Based on the email body indicators and attachment findings, rate the phishing likelihood as 'High,' 'Medium,' or 'Low,' or specify 'Inconclusive' if not enough information is available.\n\n### Output Format:\nProvide output in JSON format as follows:\n\n{\n  \"AttachmentReview\": {\n    \"Findings\": \"Summary of attachment analysis or null if no findings.\",\n    \"LegitimacyCheck\": \"true if the attachment aligns with the email’s content, false if it does not, or null if no attachment.\"\n  },\n  \"EmailBodyAnalysis\": {\n    \"EmailPurposeSummary\": \"One-sentence summary of the purpose of the email.\",\n    \"IntentSummary\": \"One-sentence summary of the main intent.\",\n    \"PhishingIndicators\": [\n      \"List specific phishing indicators like urgency or suspicious links.\"\n    ],\n    \"OverallPhishingLikelihood\": \"High, Medium, Low or null if inconclusive.\"\n  }\n}\n\n### Example JSON Output:\n{\n  \"AttachmentReview\": {\n    \"Findings\": \"Attachment appears to be an invoice with no secure file format, potential malware risk.\",\n    \"LegitimacyCheck\": false\n  },\n  \"EmailBodyAnalysis\": {\n    \"EmailPurposeSummary\": \"Notification of an invoice with a call to action to view payment details.\",\n    \"IntentSummary\": \"Encourages user to open a potentially harmful attachment and follow payment instructions.\",\n    \"PhishingIndicators\": [\n      \"Urgency through warnings.\",\n      \"Generic, non-personalized greeting.\",\n      \"Suspicious payment methods.\"\n    ],\n    \"OverallPhishingLikelihood\": \"High\"\n  }\n}\n",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "path": "/process-prompt"
                            }
                        },
                        "For_each_attachment": {
                            "foreach": "@triggerBody()?['attachments']",
                            "actions": {
                                "Check_if_binary_msg_eml_attachment": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "type": "Compose",
                                            "inputs": "@base64ToBinary(item()?['contentBytes'])"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "runAfter": {
                                                "Compose_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@string(outputs('Compose_2'))"
                                            }
                                        },
                                        "Compose_2": {
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@outputs('Decode_Base64_ContentBytes')"
                                        }
                                    },
                                    "runAfter": {
                                        "Compose_1": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Compose_1": {
                                    "type": "Compose",
                                    "inputs": "@item()"
                                }
                            },
                            "runAfter": {
                                "Set_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_domains": {
                            "runAfter": {
                                "Check_attachments_on_MDTI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['domains']"
                                        ]
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_email_body": {
                            "runAfter": {
                                "Combine_email_body_and_attachment_extracted_text": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@outputs('Combine_email_body_and_attachment_extracted_text')"
                                    }
                                ]
                            }
                        },
                        "Process_JSON": {
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "properties": {
                                        "domains": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "email_content": {
                                            "properties": {
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ip_addresses": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "urls": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Set_variable_raw_email": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_raw_urls": {
                            "runAfter": {
                                "If_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_urls": {
                            "runAfter": {
                                "Initialize_variable_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url_truncate_if_too_long": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@concat(substring(string(item()), 0, 100), '...')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_to_array_variable_1": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@string(item())"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(item())",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Until": {
                            "actions": {
                                "Summarize_Email_Intent": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "/AskGpt\n### Task: Conduct a detailed analysis of the email body to assess for phishing intent. Break down your analysis step-by-step, focusing on common phishing tactics and indicators of deceptive practices. Be mindful of legitimate transactional emails from known companies, and highlight where legitimate and suspicious elements may conflict.\n\nEmail Body:\n\"\"\"\n@{variables('email_body')}\n\"\"\"\nSender and Subject Information:\n\"\"\"\nSender: @{body('Process_JSON')?['email_content']?['sender']}\nReply-To: @{body('Process_JSON')?['email_content']?['reply_to']}\nSubject: @{body('Process_JSON')?['email_content']?['subject']}\n\"\"\"\n\n### Analysis Steps:\n1. **Sender Analysis**: Review the sender’s email address for legitimacy. Consider if the domain matches the expected sender and assess if it resembles trusted contacts or companies.\n2. **Psychological Tactics**: Identify any phrasing intended to create urgency, fear, or undue influence (e.g., warnings or calls to action that encourage quick action without careful verification).\n3. **Greeting Style**: Look for generic or impersonal greetings that might indicate a phishing attempt. Legitimate emails often include a personalized greeting.\n4. **Requests for Sensitive Information**: Search for direct or indirect requests for credentials, financial information, or personal data.\n5. **Link and Attachment Inspection**: Examine URLs, domains, and links carefully. Check for mismatches between the sender’s email domain and the link domains, and ensure the links match legitimate company sites.\n6. **Branding Consistency**: Assess if the email includes official branding (e.g., logos, contact information) that aligns with the sender’s identity. \n7. **Language and Formatting**: Analyze the language, structure, and formatting. Professional emails are typically structured and free of significant errors.\n\n### Output Format:\n- **Summary**: A concise overview of the email’s intent, based on the indicators found.\n- **Detected Indicators**: List each identified tactic or indicator of deception.\n- **Assessment**: Conclude with one of the following: 'Benign,' 'Suspicious,' or 'Phishing.'\n\n### Example:\nDetected Indicators:\n1. **Suspicious Links**: A proported financial institution requesting something with URLs that do not align to the institution or subject. \n2. **Generic Greeting**: Missing personalized recipient details.\n3. **Emotional Manipulation**: Phrasing designed to create concern or urgency.\n\nAssessment: [Benign/Suspicious/Phishing]"
                                        },
                                        "path": "/process-prompt"
                                    }
                                },
                                "Compose": {
                                    "runAfter": {
                                        "Summarize_Email_Intent": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@actions('Summarize_Email_Intent').outputs.statusCode\n"
                                },
                                "Delay_if_statuscode_not_200": {
                                    "actions": {},
                                    "runAfter": {
                                        "Compose": [
                                            "Succeeded",
                                            "Failed",
                                            "Skipped"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Delay": {
                                                "type": "Wait",
                                                "inputs": {
                                                    "interval": {
                                                        "count": 10,
                                                        "unit": "Minute"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose')",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(actions('Summarize_Email_Intent').outputs.statusCode,200)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Initialize_variable_message_id": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "message_id",
                                        "type": "string",
                                        "value": "@triggerBody()?['internetMessageId']"
                                    }
                                ]
                            }
                        },
                        "Parse_Email": {
                            "runAfter": {
                                "For_each_attachment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            }
                        },
                        "If_attachments": {
                            "actions": {
                                "For_each_pdf_attachment": {
                                    "foreach": "@variables('attachments')",
                                    "actions": {
                                        "Compose_3": {
                                            "type": "Compose",
                                            "inputs": "@item()"
                                        },
                                        "Process_Attachment_JSON": {
                                            "runAfter": {
                                                "Compose_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@outputs('Compose_3')",
                                                "schema": {
                                                    "type": "object",
                                                    "properties": {
                                                        "attachment_name": {
                                                            "type": "string"
                                                        },
                                                        "attachment_sha256": {
                                                            "type": "string"
                                                        },
                                                        "attachment_base64": {
                                                            "type": "string"
                                                        },
                                                        "content_type": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "Parse_PDF": {
                                            "runAfter": {
                                                "Process_Attachment_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Function",
                                            "inputs": {
                                                "body": "@item()?['attachment_base64']",
                                                "function": {
                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName02'))]"
                                                }
                                            }
                                        },
                                        "Append_to_attachment_extracted_text_for_each_attachment": {
                                            "runAfter": {
                                                "Parse_PDF": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "attachment_extracted_text",
                                                "value": "@body('Parse_PDF')"
                                            }
                                        }
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('attachments'))",
                                            0
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@variables('attachments')[0]?['content_type']",
                                            "application/pdf"
                                        ]
                                    },
                                    {
                                        "greater": [
                                            "@length(variables('attachments')[0]?['attachment_base64'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_variable_attachment_extracted_text": {
                            "runAfter": {
                                "Process_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachment_extracted_text",
                                        "type": "string",
                                        "value": "\"\""
                                    }
                                ]
                            }
                        },
                        "Combine_email_body_and_attachment_extracted_text": {
                            "runAfter": {
                                "Url_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@{concat(body('Process_JSON')?['email_content']?['body'], '\\n', variables('attachment_extracted_text'))}\""
                        },
                        "Analyze_domains_and_URLs": {
                            "runAfter": {
                                "Append_response1_to_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "### Task: Conduct a thorough evaluation of domains and URLs in the email to assess for potential phishing intent. Break down your analysis step-by-step, focusing on alignment with email content and intent, and provide the output in JSON format.\n\n#### Pertinent Analysis Output from Previous Prompts:\n\"\"\"\n- **Email Intent Assessment**: @{body('Summarize_Email_Intent')?['EvaluationResultContent']}\n- **Email Subject**: @{body('Process_JSON')?['email_content']?['subject']}\n- **Domain Assessment**: @{body('Copilot_check_MDTI_for_domain_reputation')?['EvaluationResultContent']}\n- **URL Assessment**: @{body('Copilot_check_MDTI_for_url_reputation')?['EvaluationResultContent']}\n\"\"\"\n\n### Evaluation Steps:\n1. **Heuristic Analysis**: \n   - Compare each domain to the brand or company referenced in the email. Flag any domain with significant deviations (e.g., unusual keywords, numbers, or unexpected TLDs) as suspicious.\n\n2. **Textual Consistency**:\n   - Determine if the domain matches the email content. For well-known brands, the domain should include recognizable variations, if any (e.g., `fedex-secure.com` may be acceptable, but `fedex-delivery123.com` is suspicious).\n   - Use Yes/No for `AlignedWithEmailIntent`, depending on the match between the domain and email subject.\n\n3. **URL Complexity**:\n   - Examine the structure of each URL for legitimacy (e.g., `www.company.com` is straightforward and less suspicious).\n   - Flag URLs with unusual elements like IP addresses, excessive subdomains, or complex query strings as suspicious.\n\n4. **Psychological and Social Engineering Cues**:\n   - Identify emotional manipulation tactics, such as urgency or threats, which can indicate phishing intent.\n   - Flag such domains as **not aligned** if they don’t match the brand yet include manipulative tactics (e.g., \"urgent action required\").\n\n### Expected JSON Output Format:\n\n{\n    \"DomainEvaluation\": {\n      \"DomainsFound\": [\n        {\n          \"Domain\": \"questionprov623407561664643060.com\",\n          \"Reputation\": \"Suspicious\",\n          \"AlignedWithEmailIntent\": \"No\"\n        },\n        {\n          \"Domain\": \"exampledomain.com\",\n          \"Reputation\": \"Safe\",\n          \"AlignedWithEmailIntent\": \"Yes\"\n        }\n      ],\n      \"OverallDomainAssessment\": \"A summary insight here based on session data, such as 'High Phishing Concern,' 'Moderate Risk,' or 'Benign. Provide evidence for your reasoning.'\"\n    },\n    \"URLEvaluation\": {\n      \"URLsFound\": [\n        {\n          \"URL\": \"defanged URL\",\n          \"Reputation\": \"Safe, Suspicious\",\n          \"AlignedWithEmailIntent\": \"Yes\",\n          \"Redirections\": \"None or final destination with number of hops\"\n        }\n      ],\n      \"OverallUrlAssessment\": \"Summary insight based on the session data, like 'High Phishing Concern,' 'Moderate Risk,' or 'Benign. Provide evidence for your reasoning.'\"\n    }\n}\n\n### Example for Alignment Evaluation:\n- **Email Intent**: \"The email claims to be from a shipping company about a pending delivery.\"\n  - **Domain**: \"fedex.com\"\n    - **AlignedWithEmailIntent**: `Yes`\n  - **Domain**: \"questionprov623407561664643060.com\"\n    - **AlignedWithEmailIntent**: `No`\n\n### Note for GPT Model:\n- If prior evaluations of domains and URLs revealed suspicious or malicious indicators, classify the `OverallDomainAssessment` and `OverallUrlAssessment` accordingly (e.g., \"High Phishing Concern\" if indicators were consistent with phishing).\n- If findings are ambiguous or non-threatening, choose a more moderate label like \"Moderate Risk\" or \"Benign.\"\n- Adhere strictly to the JSON format and provide concise Yes/No responses for `AlignedWithEmailIntent` based on the detailed analysis.\n",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "path": "/process-prompt"
                            }
                        },
                        "Final_Summary": {
                            "runAfter": {
                                "Append_response2_to_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "### Task: Provide a final assessment of the email based on prior analyses of domains, URLs, and email content. Summarize key findings to determine if the email is benign, suspicious, or phishing, and output in JSON format.\n\n### Final Classification Criteria:\n- **Classification**: Assign one of **PHISHING**, **SUSPICIOUS**, or **BENIGN** based on all prior findings.\n- **Confidence Level**: Rate as \"High,\" \"Medium,\" or \"Low\" according to the strength of evidence gathered from previous analyses.\n- **Overall Assessment Summary**: Provide a concise rationale, highlighting significant indicators such as psychological manipulation, domain inconsistencies, URL irregularities, and any other relevant findings.\n\n### Expected JSON Output Format:\n```json\n{\n    \"FinalEvaluation\": {\n      \"Classification\": \"PHISHING\", \"SUSPICIOUS\", or \"BENIGN\",\n      \"ConfidenceLevel\": \"High\", \"Medium\", or \"Low\",\n      \"OverallAssessmentSummary\": \"Concise reasoning behind the classification, referencing key indicators from prior findings.\"\n    }\n}\n\n### Example JSON Output:\n{\n    \"FinalEvaluation\": {\n      \"Classification\": \"PHISHING\",\n      \"ConfidenceLevel\": \"High\",\n      \"OverallAssessmentSummary\": \"Indicators include psychological manipulation, domain inconsistencies, and unusual URL structures. Collectively, these suggest phishing intent.\"\n    }\n}\n",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "path": "/process-prompt"
                            }
                        },
                        "Initialize_variable_attachments": {
                            "runAfter": {
                                "Initialize_variable_attachment_extracted_text": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": "@body('Process_JSON')?['email_content']?['attachments']"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Check_if_domains_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "response_array",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Append_response1_to_array": {
                            "runAfter": {
                                "Analyze_email_body_and_attachment_data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable",
                            "inputs": {
                                "name": "response_array",
                                "value": "@body('Analyze_email_body_and_attachment_data')?['EvaluationResultContent']"
                            }
                        },
                        "Append_response2_to_array": {
                            "runAfter": {
                                "Analyze_domains_and_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable",
                            "inputs": {
                                "name": "response_array",
                                "value": "@body('Analyze_domains_and_URLs')?['EvaluationResultContent']"
                            }
                        },
                        "Append_response3_to_array": {
                            "runAfter": {
                                "Final_Summary": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable",
                            "inputs": {
                                "name": "response_array",
                                "value": "@body('Final_Summary')?['EvaluationResultContent']"
                            }
                        },
                        "For_each": {
                            "foreach": "@variables('response_array')",
                            "actions": {
                                "Normalize_JSON": {
                                    "type": "Function",
                                    "inputs": {
                                        "body": "@item()",
                                        "function": {
                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName03'))]"
                                        }
                                    }
                                },
                                "Append_to_array_variable_2": {
                                    "runAfter": {
                                        "Normalize_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "final_response_array",
                                        "value": "@body('Normalize_JSON')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_final_json_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_final_json_array": {
                            "runAfter": {
                                "Append_response3_to_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "final_response_array",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Final_array": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('final_response_array')"
                        },
                        "JSON_to_HTML_Report": {
                            "runAfter": {
                                "Final_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": "@outputs('Final_array')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName04'))]"
                                }
                            }
                        },
                        "Send_an_email_(V2)": {
                            "runAfter": {
                                "Compose_4": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "To": "[parameters('PhishingReportEmailAddress')]",
                                    "Subject": "Phishing Email Analysis",
                                    "Body": "@body('JSON_to_HTML_Report')",
                                    "Attachments": [
                                        {
                                            "Name": "@{concat(body('Process_JSON')?['email_content']?['subject'], '.eml')}",
                                            "ContentBytes": "@base64(variables('raw_email'))"
                                        }
                                    ],
                                    "Importance": "Normal"
                                },
                                "path": "/v2/Mail"
                            }
                        },
                        "Compose_4": {
                            "runAfter": {
                                "JSON_to_HTML_Report": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@body('JSON_to_HTML_Report')"
                        },
                        "Url_array": {
                            "runAfter": {
                                "For_each_raw_url_truncate_if_too_long": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('urls')"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}
