{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
            "type": "string"
        }
    },

    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "metadata": {
                                "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA=": "TestAnalysis"
                            },
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA="
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@listCallbackUrl()"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA="
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Check_if_attachments_exist": {
                            "actions": {
                                "Copilot_check_file_hashes": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "\"\"",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetFileAnalysis",
                                            "SkillInputs": {
                                                "hash": "@{body('Process_JSON')?['email_content']?['attachments'][0]?['attachment_sha256']}"
                                            }
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['email_content']?['attachments'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Check_if_domains_exist": {
                            "actions": {
                                "Copilot_check_MDTI_for_domain_reputation": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "Check the reputation for these domains @{body('Process_JSON')?['domains']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_domains": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {
                                "Initialize_variable_message_id": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            }
                        },
                        "Finalize_and_score": {
                            "runAfter": {
                                "Check_if_domains_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "/AskGpt\n\n**Objective**  \nGenerate a JSON structured report summarizing the findings from this session to help determine if the submitted email is a phishing attempt. Only respond with raw JSON output and NO additional Markdown, commentary, or formatting (such as backticks or JSON annotations). Use the exact JSON schema below, with the keys and structure provided. This is required for consistent JSON output, do not deviate from these instructions. All values should be completed as described, and if any fields have no available data or findings, insert `null` as the value for consistency. Defang all URLs in the output.\n\n### Investigation Criteria and Context\n\nUse the following guidelines when analyzing each component of the email to improve classification accuracy and insights:\n\n- **Attachment Review**: If attachments are found, summarize the findings from this prompt: `@{body('Copilot_check_file_hashes')?['promptContent']}` and response: `@{body('Copilot_check_file_hashes')?['EvaluationResultContent']}`, focusing on whether the attachments align with the sender’s intent. Legitimate sources should match the content and purpose of the email. Note any potential security risks associated with the attachment.\n\n- **Email Body Analysis**:\n   - **Intent Summary**: Provide a one-sentence summary of the main purpose or message of the email based on this response: `@{body('Summarize_Email_Intent')?['EvaluationResultContent']}`\n   - **Phishing Indicators**: Identify signs commonly associated with phishing, such as urgency, requests for personal information, emotional manipulation, or generic greetings based on this response: `@{body('Summarize_Email_Intent')?['EvaluationResultContent']}`\n   - **URL Evaluation**: Carefully examine hyperlinks within the email to verify if they lead to legitimate, secure sites. Be vigilant for URL shorteners, misleading domains, or redirections that may indicate phishing. Leverage output from session: '@{body('Copilot_check_MDTI_for_domain_reputation')?['EvaluationResultContent']}` to add verdicts.\n     - Document all URLs found, highlight any flagged as suspicious, confirm if URLs match the sender’s domain, and note any redirections observed.\n\n- **Domain Verification**:\n   - **Domain Legitimacy Check**: Verify that the sender’s domain aligns with the email’s subject, intent, and message context. Use the **Delivered To** and **Return Path** fields for validation. \n   - **Domain Variations**: Identify any subtle spelling variations or differences from legitimate domains, which could suggest phishing.\n   - **Threat Intelligence**: Use Microsoft Threat Intelligence to assess domain reputation. Indicate if the domain is marked as Safe, Suspicious, Malicious, or Unknown. Provide any available reputation score.\n\n- **Content Consistency**: \n   - **Subject-Domain Alignment**: Confirm if the sender’s domain logically aligns with the email’s subject (e.g., an order-related email from Amazon should come from a domain closely related to Amazon).\n   - **Intent-Domain Match**: Evaluate if the sender’s domain contextually matches the email’s claimed entity, checking for:\n     - **Domain Relevance**: Set to `true` if the sender's domain matches known legitimate domains of the claimed sender (e.g., a bank email should come from an official bank domain). Set to `false` if subtle differences, typos, or an unfamiliar domain are present.\n     - **Contextual Fit**: Set to `true` if the domain fits the expected context and purpose of the email (e.g., business-related content coming from a relevant company domain). Set to `false` if the domain seems unrelated or inconsistent with the content.\n     - **URL Consistency**: Set to `true` if URLs found in the email align with the sender’s domain and avoid redirects to unrelated sites. Set to `false` if URLs lead to different domains, include suspicious redirections, or appear suspicious.\n\n### Final Evaluation Criteria\n\nIn the **FinalEvaluation** section, classify the email based on the following criteria:\n\n- **CERTAIN**: Choose this if the email has clear phishing characteristics, such as high-confidence threat intelligence indicators or domain inconsistencies. If any domains are marked as something other than \"UNKNOWN\" by threat intelligence, classify as **CERTAIN**.\n  \n- **SUSPICIOUS**: Select **SUSPICIOUS** if the email shows some phishing signs, such as urgency, unusual requests, or suspicious links, but lacks clear malicious indicators. Use this if the analysis is inconclusive but leans toward phishing.\n\n- **BENIGN**: Choose **BENIGN** if the email has no substantial phishing indicators, aligns with legitimate sources, and poses no known security risks.\n\nFor the **Reasoning**:\n   - Provide specific evidence for the chosen classification, with a structured summary including:\n     - **Indicators Summary**: List specific phishing indicators observed.\n     - **Domain Reputation Summary**: Describe findings from Domain Verification, including any threat intelligence insights.\n     - **URL Findings Summary**: Summarize URL-related findings, including suspicious links or redirections if applicable.\n     - **Overall Assessment Summary**: Offer a concise overview of why the email was classified as CERTAIN, SUSPICIOUS, or BENIGN.\n\nEnsure that all findings are presented only in the specified JSON format and that URLs are defanged as needed.\n\n### Output JSON Schema\n\n{\n  \"MessageID\": \"@{variables('message_id')}\",\n  \"EmailSubject\": \"@{body('Process_JSON')?['email_content']?['subject']}\",\n  \"InvestigationSummary\": {\n    \"AttachmentReview\": {\n      \"Findings\": \"Summarize findings here, based on the results of this prompt `@{body('Copilot_check_file_hashes')?['promptContent']}` and this response `@{body('Copilot_check_file_hashes')?['EvaluationResultContent']}`, or use null if no findings.\",\n      \"LegitimacyCheck\": \"Indicate if sources align with intent or use null if unavailable.\"\n    },\n    \"EmailBodyAnalysis\": {\n      \"IntentSummary\": \"Summarize email body intent or use null if unavailable.\",\n      \"PhishingIndicators\": {\n        \"Indicators\": [\n          \"List any phishing indicators such as urgency, requests for personal info, or suspicious links.\"\n        ],\n        \"URLEvaluation\": {\n          \"URLsFound\": [\n            @{string(variables('urls'))}\n          ],\n          \"PhishingIndicators\": [\n            \"List of URLs specifically flagged as suspicious or phishing-related\"\n          ],\n          \"DomainMatch\": \"Confirm if URLs match the sender’s domain, or use null if inconclusive\",\n          \"Redirections\": \"Summarize any redirections observed in the URLs, or use null if none\",\n          \"Verdict\": \"Provide overall URL assessment or null if unavailable\"\n        },\n        \"OverallPhishingLikelihood\": \"Assess tone or content for phishing likelihood (e.g., high, medium, low) or use null if assessment is inconclusive.\"\n      }\n    },\n    \"DomainVerification\": {\n      \"Objective\": \"Validate sender’s domain for legitimacy.\",\n      \"DeliveredTo\": \"@{body('Process_JSON')?['email_content']?['smtp']?['delivered_to']}\",\n      \"ReturnPath\": \"@{body('Process_JSON')?['email_content']?['return_path']}\",\n      \"ReputationLevel\": \"e.g., Safe, Suspicious, Malicious, or Unknown\",\n      \"DomainVariations\": \"Identify subtle spelling variations or differences from trusted domains, or use null if none found.\",\n      \"ThreatIntelligence\": {\n        \"ReputationScore\": \"Provide the threat intelligence score if available, or use null if unavailable.\"\n      }\n    },\n    \"ContentConsistency\": {\n      \"SubjectDomainMatch\": \"Evaluate if the sender domain aligns with the subject, e.g., an order from Amazon should be from amazon.com.\",\n      \"IntentDomainMatch\": {\n        \"DomainRelevance\": \"Set to true if the sender's domain matches known legitimate domains of the claimed sender, false otherwise.\",\n        \"ContextualFit\": \"Set to true if the domain fits the expected context and purpose of the email, false otherwise.\",\n        \"URLConsistency\": \"Set to true if URLs align with the sender's domain and avoid redirects to unrelated sites, false otherwise.\",\n        \"URLsFound\": \"@{string(variables('urls'))}\"\n      }\n    }\n  },\n  \"FinalEvaluation\": {\n    \"Classification\": \"CERTAIN, SUSPICIOUS, or BENIGN based on findings, or use null if classification is inconclusive.\",\n    \"ConfidenceLevel\": \"High, Medium, Low based on the level of evidence and indicators.\",\n    \"Reasoning\": {\n      \"IndicatorsSummary\": \"Summarize specific phishing indicators, e.g., urgency, suspicious links.\",\n      \"DomainReputationSummary\": \"Summarize findings from DomainVerification, including threat intelligence.\",\n      \"URLFindingsSummary\": \"Summarize findings from URLEvaluation, including domain match and redirections if applicable.\",\n      \"OverallAssessmentSummary\": \"Provide an overarching summary of why the email was classified as CERTAIN, SUSPICIOUS, or BENIGN.\"\n    }\n  }\n}\n\n### Instructions\n\n**Instructions:**\n- **EmailSubject**: Include the email subject here, as stated in the email header.\n- **InvestigationSummary**:\n   - **AttachmentReview**: Summarize findings on attachments, focusing on their legitimacy and alignment with the email’s intent. Use output from `GetFileAnalysis` if available.\n   - **EmailBodyAnalysis**: Provide an intent summary of the email’s main message, list any phishing indicators, and perform a detailed URL evaluation. Include all URLs found, highlight any flagged as suspicious, note if URLs match the sender's domain, and record any observed redirections.\n   - **DomainVerification**: Validate the legitimacy of the sender’s domain, checking for minor spelling variations. Use **Delivered To** and **Return Path** fields as references. Summarize any threat intelligence results, including reputation score and level (e.g., Safe, Suspicious, Malicious, Unknown).\n   - **ContentConsistency**: Confirm if the sender’s domain and URLs logically align with the email’s subject and content. Ensure the sender domain is relevant to the claimed entity, fits the email’s context, and that URLs match the sender’s domain and avoid redirections to unrelated or suspicious",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "path": "/process-prompt"
                            }
                        },
                        "For_each_attachment": {
                            "foreach": "@triggerBody()?['attachments']",
                            "actions": {
                                "Check_if_binary_msg_eml_attachment": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "type": "Compose",
                                            "inputs": "@base64ToBinary(item()?['contentBytes'])"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "runAfter": {
                                                "Compose_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@string(outputs('Compose_2'))"
                                            }
                                        },
                                        "Compose_2": {
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@outputs('Decode_Base64_ContentBytes')"
                                        }
                                    },
                                    "runAfter": {
                                        "Compose_1": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('Compose_1')?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Compose_1": {
                                    "type": "Compose",
                                    "inputs": "@item()"
                                }
                            },
                            "runAfter": {
                                "Set_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_attachments": {
                            "runAfter": {
                                "Until": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['email_content']?['attachments']"
                                        ]
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_domains": {
                            "runAfter": {
                                "Check_if_attachments_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['domains']"
                                        ]
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_email_body": {
                            "runAfter": {
                                "For_each_raw_url": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_JSON')?['email_content']?['body']"
                                    }
                                ]
                            }
                        },
                        "Parse_Email": {
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            },
                            "runAfter": {
                                "For_each_attachment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function"
                        },
                        "Process_JSON": {
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "properties": {
                                        "domains": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "email_content": {
                                            "properties": {
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ip_addresses": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "urls": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Set_variable_raw_email": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_raw_urls": {
                            "runAfter": {
                                "Process_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_urls": {
                            "runAfter": {
                                "Initialize_variable_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@concat(substring(string(item()), 0, 100), '...')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_to_array_variable_1": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@string(item())"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(item())",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Until": {
                            "actions": {
                                "Summarize_Email_Intent": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                                  "PromptContent": "/AskGpt\nObjective: In the following series of prompts, you will assess data to determine if an email is a phishing email.\n\nFirst prompt objective: \nAnalyze the body of the email for malicious intent and determine its legitimacy.\n\nEmail Body:\n\"\"\"\n@{variables('email_body')}\n\"\"\"\n\nIndicators to Look For:\n1. Sense of Urgency: Phrases like 'Act Now,' 'Urgent Action Required,' or 'Immediate Response Needed.'\n2. Generic Greetings: Greetings such as 'Dear Customer,' 'Dear User,' or 'Hello Friend.'\n3. Spelling or Grammar Mistakes: Frequent misspellings, improper grammar, or awkward phrasing.\n4. Requests for Personal Information: Asking for sensitive details like passwords, Social Security numbers, or banking information.\n5. Too Good to Be True Offers: Promises of large sums of money, prizes, or gifts.\n6. Emotional Manipulation: Attempts to create fear, anxiety, or excitement to provoke a response.\n7. Monetary Incentives: Offers of money, gift cards, or rewards for taking action.\n8. Surveys and Gift Cards: Surveys promising rewards or gift cards for participation.\n9. Unusual Requests: Requests that seem out of context or abnormal for the sender.\n10. Suspicious Links or Phone Numbers: Urging the user to click on a link or call a phone number, especially when combined with other indicators.\n11. Random Words: Presence of random words that do not make sense, used to bypass email filters.\n12. Attachments or Links: The sender is trying to get the recipient to open an attachment or click on a link, especially if combined with other suspicious indicators.\n13. Ignore any system-added disclaimer similar to: \"Caution! External Sender: This email originated from outside of the firm. Please Note: Email from 'known' contacts could still be dangerous. Never click links or open attachments without separately verifying with the sender using alternative means.\"\n14. Empty Body with Attachment: Emails with a mostly empty body but with an attachment should be considered suspicious.\n\nOutput Requirements:\n- Summarize any detected indicators.\n- Provide a final assessment of the email's legitimacy (legitimate, suspicious, or malicious).\n\nExample Format:\nDetected Indicators:\n1. Sense of Urgency\n2. Spelling Mistakes\n3. Suspicious Link\n\nAssessment: Suspicious\n"
                                        },
                                        "path": "/process-prompt"
                                    }
                                },
                                "Compose": {
                                    "runAfter": {
                                        "Summarize_Email_Intent": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@actions('Summarize_Email_Intent').outputs.statusCode\n"
                                },
                                "Delay_if_statuscode_not_200": {
                                    "actions": {},
                                    "runAfter": {
                                        "Compose": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Delay": {
                                                "type": "Wait",
                                                "inputs": {
                                                    "interval": {
                                                        "count": 2,
                                                        "unit": "Minute"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose')",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(actions('Summarize_Email_Intent').outputs.statusCode,200)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Initialize_variable_message_id": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "message_id",
                                        "type": "string",
                                        "value": "@triggerBody()?['internetMessageId']"
                                    }
                                ]
                            }
                        },
                        "Send_an_email_(V2)": {
                            "inputs": {
                                "body": {
                                    "Attachments": [
                                        {
                                            "ContentBytes": "@base64(variables('raw_email'))",
                                            "Name": "@concat(body('Process_JSON')?['email_content']?['subject'], '.eml')"
                                        }
                                    ],
                                    "Body": "<div>@{replace(body('finalize_and_score')?['evaluationResultContent'], '\\n', '<br>')}</div>\n<p>Generated with AI. Check for accuracy.</p>",
                                    "Importance": "Normal",
                                    "Subject": "Phishing Email Analysis",
                                    "To": "[parameters('PhishingReportEmailAddress')]"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            },
                            "runAfter": {
                                "Finalize_and_score": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}
