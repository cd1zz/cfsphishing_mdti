{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
        "type": "string"
    }
},
    
    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "metadata": {
                                "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA=": "TestAnalysis"
                            },
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA="
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@listCallbackUrl()"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Id::AAMkADg4NTBiMmU4LWM2NzQtNDdkOS04YTU5LTY2MzQ3NTdlMDdjYQAuAAAAAAAAs8OcnDpeS5o5J5n8pWveAQDYvqp2mTfHRqsrodcc-wyZAAA67GozAAA="
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Check_if_attachments_exist": {
                            "actions": {
                                "Copilot_check_file_hashes": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "\"\"",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetFileAnalysis",
                                            "SkillInputs": {
                                                "hash": "@{body('Process_JSON')?['email_content']?['attachments'][0]?['attachment_sha256']}"
                                            }
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['email_content']?['attachments'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Check_if_domains_exist": {
                            "actions": {
                                "Copilot_check_MDTI_for_domain_reputation": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "Check the reputation for these domains @{body('Process_JSON')?['domains']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "path": "/process-prompt"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_domains": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "runAfter": {
                                "Initialize_variable_message_id": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            }
                        },
                        "Finalize_and_score": {
                            "runAfter": {
                                "Check_if_domains_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "/AskGpt\n\n### Objective  \nGenerate an HTML formatted report summarizing the findings from this session to help determine if the submitted email is a phishing attempt. Ensure that the output uses variable placeholders as shown in the examples, maintaining a clear and structured format. Only provide the raw HTML output, and **use the exact variable notations given** for consistency. \n\n### Instructions for GPT:\n- **Output HTML must use the following variable placeholders**:\n  - For the **Email Subject**: Use `@{body('Process_JSON')?['email_content']?['subject']}` as the value in the appropriate section of the HTML.\n  - For **Delivered To**: Use `@{body('Process_JSON')?['email_content']?['smtp']?['delivered_to']}`.\n  - For **Return Path**: Use `@{body('Process_JSON')?['email_content']?['return_path']}`.\n  - For **URLs Found**: Use `@{string(variables('urls'))}`.\n\n- **Investigation Summary** should be organized as follows:\n  - **Attachment Review**: Summarize findings using output from `GetFileAnalysis`.\n  - **Email Body Analysis**: Provide intent summary, phishing indicators, and URL evaluation using the appropriate variable references.\n  - **Domain Verification**: Use provided placeholders for domain verification fields such as **Delivered To** and **Return Path**.\n  - **Content Consistency**: Include placeholders for checking consistency, and **URLs Found** should use the given variable notation.\n\n### Example Output Structure\n\nThe HTML output should follow this structure:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Phishing Investigation Report</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        h2, h3 {\n            color: #333;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            margin-bottom: 10px;\n        }\n        p {\n            color: #444;\n        }\n        .defanged-url {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <h2>Email Subject:</h2>\n    <p>@{body('Process_JSON')?['email_content']?['subject']}</p>\n\n    <h2>Investigation Summary</h2>\n\n    <h3>1. Attachment Review</h3>\n    <ul>\n        <li><strong>Findings:</strong> Summarize your findings here, based on GetFileAnalysis, or use null if no findings.</li>\n        <li><strong>Legitimacy Check:</strong> Verify the legitimacy of the file sources and ensure that the attachment aligns with the intent of the email.</li>\n    </ul>\n\n    <h3>2. Email Body Analysis</h3>\n    <ul>\n        <li><strong>Intent Summary:</strong> Summarize the intent of the email body in one sentence.</li>\n        <li><strong>Phishing Indicators:</strong> \n            <ul>\n                <li>List any indicators of phishing, such as urgency, requests for personal information, or suspicious links.</li>\n                <li><strong>URL Evaluation:</strong> Carefully examine any hyperlinks within the email. Ensure they lead to legitimate, secure sites. Watch for URL shorteners, misleading domains, and redirections that might indicate phishing.</li>\n                <li><strong>URLs Found:</strong>\n                    <ul>\n                        <li><span class=\"defanged-url\">URL 1 (defanged)</span></li>\n                        <li><span class=\"defanged-url\">URL 2 (defanged)</span></li>\n                    </ul>\n                </li>\n                <li><strong>Overall Assessment:</strong> Analyze whether the tone or content suggests phishing likelihood.</li>\n            </ul>\n        </li>\n    </ul>\n\n    <h3>3. Domain Verification</h3>\n    <ul>\n        <li><strong>Domain Legitimacy Check:</strong> Verify if the email domain aligns with the content, subject, and intent of the message.\n            <ul>\n                <li><strong>Delivered to:</strong> @{body('Process_JSON')?['email_content']?['smtp']?['delivered_to']}</li>\n                <li><strong>Return Path:</strong> @{body('Process_JSON')?['email_content']?['return_path']}</li>\n            </ul>\n        </li>\n        <li><strong>Domain Variations:</strong> Identify any subtle spelling variations or differences from trusted domains.</li>\n        <li><strong>Threat Intelligence:</strong> Summarize the domain reputation using Microsoft Threat Intelligence (e.g., Safe, Suspicious, Malicious, or Unknown).</li>\n    </ul>\n\n    <h3>4. Content Consistency</h3>\n    <ul>\n        <li><strong>Subject-Domain Alignment:</strong> Evaluate if the sender's domain logically aligns with the email’s subject (e.g., an order-related email from Amazon should come from amazon.com).</li>\n        <li><strong>Intent-Domain Match:</strong>\n            <ul>\n                <li><strong>Domain Relevance:</strong> Verify if the domain matches the claimed entity.</li>\n                <li><strong>Contextual Fit:</strong> Confirm if the domain aligns with the email's claimed entity and content.</li>\n                <li><strong>URL Consistency:</strong> Ensure that any URLs in the email match the sender’s domain and avoid unrelated or suspicious redirects.</li>\n                <li><strong>URLs Found:</strong> @{string(variables('urls'))}</li>\n            </ul>\n        </li>\n    </ul>\n\n    <h2>Final Evaluation</h2>\n    <p>Based on the analysis from this session, the email will be classified as follows:</p>\n    <ul>\n        <li><strong>CERTAIN:</strong> Choose if the email shows clear phishing characteristics and if domain verification fails or any domains are flagged as malicious.</li>\n        <li><strong>SUSPICIOUS:</strong> Choose if the email shows some phishing signs but lacks clear evidence of being harmful.</li>\n        <li><strong>BENIGN:</strong> Choose if there are no significant phishing indicators, and the email appears safe.</li>\n    </ul>\n\n    <h3>Reasoning:</h3>\n    <ul>\n        <li><strong>Indicators Summary:</strong> Summarize any phishing indicators, such as urgency or suspicious content.</li>\n        <li><strong>Domain Reputation Summary:</strong> Describe the results from the domain verification, including threat intelligence insights.</li>\n        <li><strong>URL Findings Summary:</strong> Summarize URL evaluations, indicating any redirections or suspicious links.</li>\n        <li><strong>Overall Assessment Summary:</strong> Offer a concise explanation of why the email was classified as CERTAIN, SUSPICIOUS, or BENIGN.</li>\n    </ul>\n</body>\n</html>\n\n**Instructions Recap:**\n- Provide only the HTML output.\n- **Use the exact variable notation provided** in the correct sections.\n- Ensure all URLs are defanged, and indicate them with the `<span class=\"defanged-url\">` tag.\n- No additional commentary or non-HTML output.",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "path": "/process-prompt"
                            }
                        },
                        "For_each_attachment": {
                            "foreach": "@triggerBody()?['attachments']",
                            "actions": {
                                "Check_if_binary_msg_eml_attachment": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "type": "Compose",
                                            "inputs": "@base64ToBinary(items('For_each_attachment')?['contentBytes'])"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@outputs('Decode_Base64_ContentBytes')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Set_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_attachments": {
                            "runAfter": {
                                "Until": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['email_content']?['attachments']"
                                        ]
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_domains": {
                            "runAfter": {
                                "Check_if_attachments_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['domains']"
                                        ]
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_email_body": {
                            "runAfter": {
                                "For_each_raw_url": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_JSON')?['email_content']?['body']"
                                    }
                                ]
                            }
                        },
                        "Parse_Email": {
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            },
                            "runAfter": {
                                "For_each_attachment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function"
                        },
                        "Process_JSON": {
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "properties": {
                                        "domains": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "email_content": {
                                            "properties": {
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ip_addresses": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "urls": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Set_variable_raw_email": {
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_raw_urls": {
                            "runAfter": {
                                "Process_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_urls",
                                        "type": "array",
                                        "value": "@body('Process_JSON')?['urls']"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_urls": {
                            "runAfter": {
                                "Initialize_variable_raw_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "urls",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "For_each_raw_url": {
                            "foreach": "@variables('raw_urls')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "urls",
                                                "value": "@concat(substring(string(item()), 0, 100), '...')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_to_array_variable_1": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "urls",
                                                    "value": "@string(item())"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(item())",
                                                    100
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_urls": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Until": {
                            "actions": {
                                "Summarize_Email_Intent": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "PromptContent": "/AskGpt Objective: In the following series of prompts you will assess data to determine if an email is a phishing email. First prompt objective: Analyze the body of this email for malicious intent and legitimacy \"@{variables('email_body')}\" Indicators to Look For (analyze the available data points): 1. Sense of Urgency: Phrases like 'Act Now,' 'Urgent Action Required,' or 'Immediate Response Needed.' 2. Generic Greetings: Greetings such as 'Dear Customer,' 'Dear User,' or 'Hello Friend.' 3. Spelling or Grammar Mistakes: Frequent misspellings, improper grammar, or awkward phrasing. 4. Requests for Personal Information: Asking for sensitive details like passwords, Social Security numbers, or banking information. 5. Too Good to Be True Offers: Promises of large sums of money, prizes, or gifts. 6. Emotional Manipulation: Attempts to create fear, anxiety, or excitement to provoke a response. 7. Monetary Incentives: Offers of money, gift cards, or rewards for taking action. 8. Surveys and Gift Cards: Surveys promising rewards or gift cards for participation. 9. Unusual Requests: Requests that seem out of context or abnormal for the sender. 10. Suspicious Links or Phone Numbers: Urging the user to click on a link or call a phone number, especially when combined with other indicators. 11. Random Words: Presence of random words that do not make sense, used to bypass email filters. 12. Attachments or Links: Check if the sender is trying to get the recipient to open an attachment or click on a link, especially if combined with other suspicious indicators. Evaluate the body of the email based on these criteria to determine its legitimacy and potential malicious intent."
                                        },
                                        "path": "/process-prompt"
                                    }
                                },
                                "Compose": {
                                    "runAfter": {
                                        "Summarize_Email_Intent": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@actions('Summarize_Email_Intent').outputs.statusCode\n"
                                },
                                "Delay_if_statuscode_not_200": {
                                    "actions": {},
                                    "runAfter": {
                                        "Compose": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Delay": {
                                                "type": "Wait",
                                                "inputs": {
                                                    "interval": {
                                                        "count": 2,
                                                        "unit": "Minute"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose')",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(actions('Summarize_Email_Intent').outputs.statusCode,200)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Initialize_variable_message_id": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "message_id",
                                        "type": "string",
                                        "value": "@triggerBody()?['internetMessageId']"
                                    }
                                ]
                            }
                        },
                        "Send_an_email_(V2)": {
                            "inputs": {
                                "body": {
                                    "Attachments": [
                                        {
                                            "ContentBytes": "@base64(variables('raw_email'))",
                                            "Name": "@concat(body('Process_JSON')?['email_content']?['subject'], '.eml')"
                                        }
                                    ],
                                    "Body": "<div>@{replace(body('Parse_JSON')?['evaluationResultContent'], '\\n', '<br>')}</div>",
                                    "Importance": "Normal",
                                    "Subject": "Phishing Email Analysis",
                                    "To": "[parameters('PhishingReportEmailAddress')]"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}
